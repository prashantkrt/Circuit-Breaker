spring.application.name=DepartmentClientService-CircuitBreaker

server.port=8081

# ===============================
# RESILIENCE4J CIRCUIT BREAKER CONFIG
# ===============================
resilience4j.circuitbreaker.instances.department_circuit_breaker.slidingWindowSize=10
resilience4j.circuitbreaker.instances.department_circuit_breaker.failureRateThreshold=50
resilience4j.circuitbreaker.instances.department_circuit_breaker.waitDurationInOpenState=5000
resilience4j.circuitbreaker.instances.department_circuit_breaker.minimumNumberOfCalls=5
resilience4j.circuitbreaker.instances.department_circuit_breaker.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.department_circuit_breaker.automaticTransitionFromOpenToHalfOpenEnabled=true

# ===============================
# TIMEOUT CONFIGURATION
# ===============================
resilience4j.timelimiter.instances.department_circuit_breaker.timeoutDuration=3s

#slidingWindowSize=10 ? Evaluates failures over the last 10 requests. Once minimumNumberOfCalls is reached, the failure rate is calculated using only the last 10 calls.
#failureRateThreshold=50 ? Trips the breaker if 50% requests fail.
#waitDurationInOpenState=5000 or 5s ? Stays OPEN for 5s before attempting recovery.
#minimumNumberOfCalls=5 ? Needs at least 5 calls before calculating failure rate. Once at least 5 calls have been recorded, the Circuit Breaker starts calculating the failure rate based on failureRateThreshold.
#automaticTransitionFromOpenToHalfOpenEnabled=true ? Enables automatic state transition.
#timeoutDuration=3s ? Requests must complete within 3 seconds, else fail.


#Case 1: First Few Calls (minimumNumberOfCalls=5 Not Met)
#Suppose the circuit breaker receives 3 calls, and all fail.
#Failure rate calculation doesn?t start yet, since the minimum threshold (5) is not reached.

#Case 2: minimumNumberOfCalls=5 Reached
#If the next two calls (4th and 5th) also fail, now we have 5 recorded calls.
#Failure rate calculation begins.
#Failure Rate = (5 failed calls / 5 total calls) × 100 = 100%.

#Case 3: slidingWindowSize=10 in Action
#Now, let's assume 5 more requests come in.
#The circuit breaker will only consider the latest 10 calls (oldest ones get removed).

#Last 10 calls: [Fail, Fail, Success, Success, Fail, Success, Fail, Success, Fail, Fail]
#f failureRateThreshold=50%, and more than 50% of these last 10 calls are failures, the circuit breaker trips (opens).

#note:
#The failure rate isn't calculated on just 5 requests, but rather on the most recent 10 requests.
#However, the circuit breaker won't start evaluating failures until at least 5 calls have been recorded.

#example 1 :
#resilience4j.circuitbreaker.instances.myService.failureRateThreshold=50
#resilience4j.circuitbreaker.instances.myService.slidingWindowSize=10
#resilience4j.circuitbreaker.instances.myService.waitDurationInOpenState=5000
#resilience4j.circuitbreaker.instances.myService.permittedNumberOfCallsInHalfOpenState=3

#Explanation of how the circuit breaker works, for above example,
#The Circuit Breaker opens when 50% of the last 10 requests fail.
#It stays open for 5 seconds.
#Then, it half-opens and allows 3 test calls:
#If these 3 succeed, ? Circuit Breaker closes.
#If they fail, ? Circuit Breaker opens again.

#example 2
#resilience4j.circuitbreaker.instances.myService.failureRateThreshold=50
#resilience4j.circuitbreaker.instances.myService.permittedNumberOfCallsInHalfOpenState=3

#Explanation of how the circuit breaker works, for above example,
#Allowed test calls: 3
#1 out of 3 fails ? Failure rate = (1/3) × 100 = 33.33%
#Since 33.33% < 50%, the Circuit Breaker closes (normal operations resume).


#example 3
#resilience4j.circuitbreaker.instances.myService.failureRateThreshold=30
#resilience4j.circuitbreaker.instances.myService.permittedNumberOfCallsInHalfOpenState=3

#Explanation of how the circuit breaker works, for above example,
#Allowed test calls: 3
#1 out of 3 fails ? Failure rate = 33.33%
#Since 33.33% > 30%, the Circuit Breaker re-opens (blocks requests again for waitDurationInOpenState).